# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        name: str = None,
        email: str = None,
        password: str = None,
        cnpj: str = None,
        company_name: str = None,
        phone_number: str = None,
    ):  # noqa: E501
        """User - a model defined in Swagger

        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param cnpj: The cnpj of this User.  # noqa: E501
        :type cnpj: str
        :param company_name: The company_name of this User.  # noqa: E501
        :type company_name: str
        :param phone_number: The phone_number of this User.  # noqa: E501
        :type phone_number: str
        """
        self.swagger_types = {
            "name": str,
            "email": str,
            "password": str,
            "cnpj": str,
            "company_name": str,
            "phone_number": str,
        }

        self.attribute_map = {
            "name": "name",
            "email": "email",
            "password": "password",
            "cnpj": "cnpj",
            "company_name": "company_name",
            "phone_number": "phone_number",
        }
        self._name = name
        self._email = email
        self._password = password
        self._cnpj = cnpj
        self._company_name = company_name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt) -> "User":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def cnpj(self) -> str:
        """Gets the cnpj of this User.


        :return: The cnpj of this User.
        :rtype: str
        """
        return self._cnpj

    @cnpj.setter
    def cnpj(self, cnpj: str):
        """Sets the cnpj of this User.


        :param cnpj: The cnpj of this User.
        :type cnpj: str
        """

        self._cnpj = cnpj

    @property
    def company_name(self) -> str:
        """Gets the company_name of this User.


        :return: The company_name of this User.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name: str):
        """Sets the company_name of this User.


        :param company_name: The company_name of this User.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this User.


        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this User.


        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """

        self._phone_number = phone_number
